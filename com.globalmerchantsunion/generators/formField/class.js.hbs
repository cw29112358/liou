/**
*
* {{ properCase name }}
*
*/
{{#if wantTransLate}}

/* global translate */
{{/if}}

import React from 'react';
import PropTypes from 'prop-types';
import {
  Item,
  Input,
  Label,
} from 'native-base';

import styles from 'formFields/styles';

class {{ properCase name }} extends {{{ type }}} { // eslint-disable-line
  constructor(props) {
    super(props);
    this.state = {
      selected: !!props.input.value,
    };
  }

  onChange = () => {
    const { selected } = this.state;
    const { input } = this.props;
    this.setState({ selected: !selected });
    input.onChange(!selected);
  }

  render() {
    const {
      input, label, hasLabel, children, standardStyle,
      itemSettings, itemstyle, labelStyle,
      firstErrorFieldKey, onClearFirstErrorFieldKey,
    } = this.props;
    const { selected } = this.state;
    const itemLayout = [itemstyle];
    if (firstErrorFieldKey === input.name) itemLayout.push(styles.error);

    const labelText = label || input.name;

    return (
      <Item {...itemSettings} style={itemLayout}>
        <Radio
          style={styles.radio}
          standardStyle={standardStyle}
          selected={selected}
          onPress={this.onChange}
          onFocus={() => onClearFirstErrorFieldKey(input.name)}
        />
        {hasLabel && <Label style={labelStyle}>{{#if wantTransLate}}{translate(labelText)}{{else}}{labelText}{{/if}}</Label>}
        {children && children}
      </Item>
    );
  }
}

{{ properCase name }}.defaultProps = {
  input: {
    value: false,
    onChange: () => null,
  },
  label: '',
  itemSettings: {},
  itemstyle: {},
  labelStyle: {},
  hasLabel: false,
  children: null,
  standardStyle: true,
};

{{ properCase name }}.propTypes = {
  input: PropTypes.shape({
    value: PropTypes.any,
    onChange: PropTypes.func,
  }),
  label: PropTypes.string,
  itemSettings: PropTypes.object,
  itemstyle: PropTypes.object,
  labelStyle: PropTypes.object,
  hasLabel: PropTypes.bool,
  children: PropTypes.any,
  standardStyle: PropTypes.bool,
  firstErrorFieldKey: PropTypes.string.isRequired,
  onClearFirstErrorFieldKey: PropTypes.func.isRequired,
};

export default {{ properCase name }};
